C***********************************************************************
C***UMAT FOR ABAQUS/STANDARD,LARGE DEFORMATION FORMULATION        ******
C***                                                              ******
C***WRITTEN BY WU BOXUN     THE UNIVERSITY OF TOKYO               ******
C***NON-ASSOCIATED FLOW RULES   &  HILL 1948                      ******
C*** ALGORITHM   BACKWARD EULER       RETURN MAPPING              ******
C***YIELD FUNCTION F     POTENTIAL FUNCTION G                     ******
C***********************************************************************
C
*******USER SUBROUTINE 
C
       SUBROUTINE UMAT(STRESS,STATEV,DDSDDE,SSE,SPD,SCD,
     1 RPL,DDSDDT,DRPLDE,DRPLDT,
     2 STRAN,DSTRAN,TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,CMNAME,
     3 NDI,NSHR,NTENS,NSTATV,PROPS,NPROPS,COORDS,DROT,PNEWDT,
     4 CELENT,DFGRD0,DFGRD1,NOEL,NPT,LAYER,KSPT,KSTEP,KINC)
C
       INCLUDE 'ABA_PARAM.INC'
C
       CHARACTER*80 CMNAME
       DIMENSION STRESS(NTENS),STATEV(NSTATV),
     1 DDSDDE(NTENS,NTENS),DDSDDT(NTENS),DRPLDE(NTENS),
     2 STRAN(NTENS),DSTRAN(NTENS),TIME(2),PREDEF(1),DPRED(1),
     3 PROPS(NPROPS),COORDS(3),DROT(3,3),DFGRD0(3,3),DFGRD1(3,3)
C   DEFINE THE VARIABLES
       PARAMETER(ZERO=0.D0,ONE=1.D0,TWO=2.D0,THREE=3.D0,HALF=5.D-1,
     1 ENUMAX=0.4999D0,TOLER=1.0D-6,FOUR=4.D0,SIX=6.D0,NINE=9.D0,
     2 NEWTON=70,ONEHALF=1.5D0)	 
C
       DOUBLE PRECISION EMOD,ENU,EG,EG2,EG3,EBULK3,ELAME,YIELD0,HK,HN,
	1 YIELDD
C   DEFINE THE INTERMEDIATE VARIABLES
C   HH-HARDENING RATE  HW-FACTOR
       DOUBLE PRECISION SIGMA_X,SIGMA_Y,SIGMA_Z,TAO_XY,
	1 TAO_YZ,TAO_ZX,ALPHAF,ALPHAG,NBLFM1,NBLFM2,DNBL,
	2 NBLFM,NBLFZ,CNBL,JCOBFM,B,GAA
C	
       DOUBLE PRECISION EQPSTRESS
C   VARIABLES IN F FUNCTION
       DOUBLE PRECISION FSIGMA_SX,FSIGMA_SY,FSIGMA_SZ,
	1 FTAO_SYZ,FTAO_SZX,FTAO_SXY,FEQSTRESS,FSUM,FH,FF,FG,FL,FM,FN,
	2 FSA,FSB,FSC,FSD,FSE,FSF
C   VARIABLES IN G FUNCTION
       DOUBLE PRECISION GSIGMA_SX,GSIGMA_SY,GSIGMA_SZ,
	1 GTAO_SYZ,GTAO_SZX,GTAO_SXY,GEQSTRESS,GSUM,GH,GF,GG,GL,GM,GN,
	2 GSA,GSB,GSC,GSD,GSE,GSF
C	DEFINE STATE VARIABLES
       DOUBLE PRECISION EQPLAS
C     DEFINE UPDATA VARIABLES	   
       DOUBLE PRECISION DEQPLAS		
C     NEW VARIABLES (UN-FINISHED)
       DIMENSION EELAS(6),EPLAS(6),PSTRES(6),DDFDDS(6),DDGDDS(6),
     1 JCOBFZ(6,6),DDBDDS(6,6),DSTRES(6),DDGDS(6),DDSTIFF(6,6),
	2 DDEDDB(6,6),Q(6,6),INVQ(6,6),R(6,6),NBLFMT(6), 
     3 R0(6),NBLQR(6),ATRT(6),RB(6),IS(6),JS(6)
       DOUBLE PRECISION EELAS,EPLAS,PSTRES,DDFDDS,DDGDDS,
     1 JCOBFZ,DDBDDS,DSTRES,DDGDS,DDSTIFF,
	2 DDEDDB,Q,INVQ,R,NBLFMT,
     3 R0,NBLQR,ATRT,RB,IS,JS
       INTEGER NVALUE,L
C***********************************************************
C   
      EMOD=PROPS(1)
	ENU=MIN(PROPS(2),ENUMAX)
      FH=PROPS(3)
	FF=PROPS(4)
      FG=PROPS(5)
      FL=PROPS(6)
      FM=PROPS(6)
	FN=PROPS(6)
	GH=PROPS(7)
	GF=PROPS(8)
	GG=PROPS(9)
	GL=PROPS(10)
	GM=PROPS(10)
	GN=PROPS(10)
	YIELD0=PROPS(11)
      HB=PROPS(12)
      HC=PROPS(13)
      EG=EMOD/(TWO*(ONE+ENU))
C   3K	  
	EBULK3=EMOD/(ONE-TWO*ENU)  
C   2G 3G
	EG2=TWO*EG
	EG3=THREE*EG
      ELAME=(EBULK3-EG2)/THREE	
C     INITIALIZE THE MATRIX(NOT FINISHED)
      DO K1=1,NTENS
         DO K2=1,NTENS
            DDSDDE(K1,K2)=ZERO
            JCOBFZ(K1,K2)=ZERO	
            DDBDDS(K1,K2)=ZERO 			
			DDSTIFF(K1,K2)=ZERO
			Q(K1,K2)=ZERO
			INVQ(K1,K2)=ZERO
		    R(K1,K2)=ZERO
         ENDDO
	  PSTRES(K1)=ZERO 
	  DSTRES(K1)=ZERO
	  DDGDS(K1)=ZERO
        NBLFMT(K1)=ZERO
        NBLQR(K1)=ZERO
        R0(K1)=ZERO
        ATRT(K1)=ZERO
        RB(K1)=ZERO
      ENDDO
C   ELASTIC MATRIX
      DO K1=1,NDI
        DO K2=1,NDI
        DDSDDE(K1,K2)=ELAME
        ENDDO
        DDSDDE(K1,K1)=EG2+ELAME
      ENDDO
      DO K1=NDI+1,NTENS
        DDSDDE(K1,K1)=EG
      ENDDO
C   SAVE THE ELASTIC MATRIX TO DDSTIFF
      DO K1=1,NTENS
         DO K2=1,NTENS
		 DDSTIFF(K1,K2)=DDSDDE(K1,K2)
	   ENDDO
      ENDDO	 
C	
      CALL ROTSIG(STATEV(1),DROT,EELAS,2,NDI,NSHR)
      CALL ROTSIG(STATEV(NTENS+1),DROT,EPLAS,2,NDI,NSHR)
C
C      READ EQPLAS    INITIAL VALUE IS 0
      DO K1=1,NTENS
      EELAS(K1)=STATEV(K1)
      EPLAS(K1)=STATEV(K1+NTENS)
      ENDDO
C     READ THE EQUIVALENT PLASTIC STRAIN   
      EQPLAS=STATEV(13) 	  
C
C*****************************************************
C  CALCULATE THE TRIAL STRESS--PSTRES  // ON B POINT
C*****************************************************
       DO K1=1,NTENS
	   DO K2=1,NTENS
		 DSTRES(K1)=DSTRES(K1)+DDSDDE(K1,K2)*DSTRAN(K2)
         ENDDO
         EELAS(K1)=EELAS(K1)+DSTRAN(K1)
      ENDDO 
C      
C      WRITE(6,*),'EELAS',EELAS(1)
C      
      DO K1=1,NTENS
          PSTRES(K1)=STRESS(K1)+DSTRES(K1)
      ENDDO
C   READ STRESS VARIABLES
      SIGMA_X=PSTRES(1)
	SIGMA_Y=PSTRES(2)
      SIGMA_Z=PSTRES(3)
      TAO_XY=PSTRES(4)
	TAO_ZX=PSTRES(5)
      TAO_YZ=PSTRES(6)
	FSUM=ONE/(FF+FG+FH)
	GSUM=ONE/(GF+GG+GH)      
C      WRITE(6,*),'PSTRESS123',PSTRES(1),PSTRES(2),PSTRES(3)
C	DEFINE THE DERIVATION STRESS IN F FUNCTION
	FSIGMA_SX=(FH*(SIGMA_X-SIGMA_Y)+FG*(SIGMA_X-SIGMA_Z))*FSUM
	FSIGMA_SY=(FF*(SIGMA_Y-SIGMA_Z)+FH*(SIGMA_Y-SIGMA_X))*FSUM
      FSIGMA_SZ=(FG*(SIGMA_Z-SIGMA_X)+FF*(SIGMA_Z-SIGMA_Y))*FSUM
	FTAO_SYZ=FL*TAO_YZ*FSUM
	FTAO_SZX=FM*TAO_ZX*FSUM
	FTAO_SXY=FN*TAO_XY*FSUM
      FEQSTRESS=FF*(SIGMA_Y-SIGMA_Z)**TWO+FG*(SIGMA_Z-SIGMA_X)**TWO
     1 +FH*(SIGMA_X-SIGMA_Y)**TWO+TWO*FL*TAO_YZ**TWO+
	2 TWO*FM*TAO_ZX**TWO+TWO*FN*TAO_XY**TWO
	 FEQSTRESS=DSQRT(THREE*FSUM*FEQSTRESS/TWO)
C     DEFINE THE DERIVATION STRESS IN G FUNCTION
	 GSIGMA_SX=(GH*(SIGMA_X-SIGMA_Y)+GG*(SIGMA_X-SIGMA_Z))*GSUM
	 GSIGMA_SY=(GF*(SIGMA_Y-SIGMA_Z)+GH*(SIGMA_Y-SIGMA_X))*GSUM
	 GSIGMA_SZ=(GG*(SIGMA_Z-SIGMA_X)+GF*(SIGMA_Z-SIGMA_Y))*GSUM
	 GTAO_SYZ=GL*TAO_YZ*GSUM
	 GTAO_SZX=GM*TAO_ZX*GSUM
	 GTAO_SXY=GN*TAO_XY*GSUM
C     OTHER STRESS IN G FUNCTION 	 
	 GEQSTRESS=GF*(SIGMA_Y-SIGMA_Z)**TWO+GG*(SIGMA_Z-SIGMA_X)**TWO
     1 +GH*(SIGMA_X-SIGMA_Y)**TWO+TWO*GL*TAO_YZ**TWO+
     2 TWO*GM*TAO_ZX**TWO+TWO*GN*TAO_XY**TWO
	 GEQSTRESS=DSQRT(THREE*GSUM*GEQSTRESS/TWO)       
C
C
C     CALCULATE THE YIELD STRESS AT B POINT
C      CALL USERHARD(SYIEL0,HARD,EQPLAS,PROPS(11))
C      YIELDD=SYIEL0
      IF(EQPLAS.EQ.0.0)THEN
      HARD=EMOD  
      YIELDD=YIELD0
      ELSE 
C      HARD=HN*HK*(EQPLAS)**(HN-1)
      HARD=HB*HC*exp(-HC*EQPLAS)
C      HARD=HN*HK*(EQPLAS+YIELD0/EMOD)**(HN-1)      
      YIELDD=YIELD0+HB*(1-exp(-HC*EQPLAS))
C      YIELDD=MAX((HK*(EQPLAS+YIELD0/EMOD)**HN),YIELD0)
      ENDIF
C  
	FB=FEQSTRESS-YIELDD
C	IF FB>0 PLASTIC  FB<0 ELASTIC
*********************************************      
      IF(FB.GT.TOLER)THEN
*********************************************       
C      WRITE(6,*),'FB--FEQSTRESS-yieldd',FB,FEQSTRESS,YIELDD
C	FIRST ORDER F-SIGMA 
      ALPHAF=THREE/(TWO*FEQSTRESS)
      DDFDDS(1)=ALPHAF*FSIGMA_SX
	DDFDDS(2)=ALPHAF*FSIGMA_SY
	DDFDDS(3)=ALPHAF*FSIGMA_SZ
      DDFDDS(4)=ALPHAF*TWO*FTAO_SXY
	DDFDDS(5)=ALPHAF*TWO*FTAO_SZX
	DDFDDS(6)=ALPHAF*TWO*FTAO_SYZ
C     
C	FIRST ORDER G-SIGMA
      ALPHAG=THREE/(TWO*GEQSTRESS)
      DDGDDS(1)=ALPHAG*GSIGMA_SX
	DDGDDS(2)=ALPHAG*GSIGMA_SY
	DDGDDS(3)=ALPHAG*GSIGMA_SZ
      DDGDDS(4)=ALPHAG*TWO*GTAO_SXY
	DDGDDS(5)=ALPHAG*TWO*GTAO_SZX
	DDGDDS(6)=ALPHAG*TWO*GTAO_SYZ
C**************************************************
c      DO K1=1+NDI,NTENS
c          DDGDDS(K1)=TWO*DDGDDS(K1)
c      ENDDO
C***************************************************      
C
C     CALCULATE [D][DDGDDS]=DDGDS
      DO K1=1,NTENS
	     DO K2=1,NTENS
		   DDGDS(K1)=DDGDS(K1)+DDSDDE(K1,K2)*DDGDDS(K2)
           ENDDO
      ENDDO
C      WRITE(7,*),'DDGDS',DDGDS(1)
C*******      *******         *******              *********
C      
C     CALCULATE NBLFM2--A'                 *****QUESTION
       GAA=ONE/(GF*GG+GG*GH+GH*GF)
       B=GF*((GG*DDGDDS(2)-GH*DDGDDS(3))*GAA)**TWO+
     1 GG*((GH*DDGDDS(3)-GF*DDGDDS(1))*GAA)**TWO+
     2 GH*((GF*DDGDDS(1)-GG*DDGDDS(2))*GAA)**TWO
C
       B=B+DDGDDS(4)*DDGDDS(4)*HALF/GN+
     1 DDGDDS(5)*DDGDDS(5)*HALF/GM+
     2 DDGDDS(6)*DDGDDS(6)*HALF/GL
C
       B=DSQRT(TWO*(GF+GG+GH)*B/THREE)
	 NBLFM2=HARD*B
C     CALCULATE NBLFM1 F-D-G
      DO K1=1,NTENS
         NBLFM1=NBLFM1+DDFDDS(K1)*DDGDS(K1)
      END DO
C     CALCULATE DNBL (D LAMEDA)
      DNBL=FB/(NBLFM1+NBLFM2)
C
C
C	PULL THE STRESS TO THE YIELD SURFACE*****DDGDS IS ON B POINT
      DO K1=1,NTENS
         STRESS(K1)=PSTRES(K1)-DNBL*DDGDS(K1)
      END DO
C      WRITE(6,*),'DNBL',DNBL,'DDGDS',DDGDS(1)
C     WRITE(6,*),'pstres123',PSTRES(1),PSTRES(2),PSTRES(3)
C      WRITE(6,*),'stressC123',STRESS(1),STRESS(2),STRESS(3)
C*********************************************************************
C     DO  NEWTON ITERATION FOR THE SATISFIED STRESS
C*********************************************************************	  
      DO KNEWRTON=1,NEWTON
	   SIGMA_X=STRESS(1)
	   SIGMA_Y=STRESS(2)
         SIGMA_Z=STRESS(3)
         TAO_XY=STRESS(4)
         TAO_ZX=STRESS(5)	   
         TAO_YZ=STRESS(6)
C         WRITE(7,*),'STRESS@C XYZ',SIGMA_X, SIGMA_Y, SIGMA_Z
C     CALCULATE F FUNCTION ON POINT C
      FSIGMA_SX=(FH*(SIGMA_X-SIGMA_Y)+FG*(SIGMA_X-SIGMA_Z))*FSUM
	FSIGMA_SY=(FF*(SIGMA_Y-SIGMA_Z)+FH*(SIGMA_Y-SIGMA_X))*FSUM
	FSIGMA_SZ=(FG*(SIGMA_Z-SIGMA_X)+FF*(SIGMA_Z-SIGMA_Y))*FSUM
	FTAO_SYZ=FL*TAO_YZ*FSUM
	FTAO_SZX=FM*TAO_ZX*FSUM
	FTAO_SXY=FN*TAO_XY*FSUM
	FEQSTRESS=FF*(SIGMA_Y-SIGMA_Z)**TWO+FG*(SIGMA_Z-SIGMA_X)**TWO
     1 +FH*(SIGMA_X-SIGMA_Y)**TWO+TWO*FL*TAO_YZ**TWO+
	2 TWO*FM*TAO_ZX**TWO+TWO*FN*TAO_XY**TWO
	FEQSTRESS=DSQRT(THREE*FSUM*FEQSTRESS/TWO)
C     CALCULATE G FUNCTION ON POINT C
      GSIGMA_SX=(GH*(SIGMA_X-SIGMA_Y)+GG*(SIGMA_X-SIGMA_Z))*GSUM
	GSIGMA_SY=(GF*(SIGMA_Y-SIGMA_Z)+GH*(SIGMA_Y-SIGMA_X))*GSUM
	GSIGMA_SZ=(GG*(SIGMA_Z-SIGMA_X)+GF*(SIGMA_Z-SIGMA_Y))*GSUM
	GTAO_SYZ=GL*TAO_YZ*GSUM
	GTAO_SZX=GM*TAO_ZX*GSUM
	GTAO_SXY=GN*TAO_XY*GSUM
	GEQSTRESS=GF*(SIGMA_Y-SIGMA_Z)**TWO+GG*(SIGMA_Z-SIGMA_X)**TWO
     1 +GH*(SIGMA_X-SIGMA_Y)**TWO+TWO*GL*TAO_YZ**TWO+
     2 TWO*GM*TAO_ZX**TWO+TWO*GN*TAO_XY**TWO
	GEQSTRESS=DSQRT(THREE*GSUM*GEQSTRESS/TWO)
C
C      FIRST ORDER F-SIGMA
      ALPHAF=THREE/(TWO*FEQSTRESS)
      DDFDDS(1)=ALPHAF*FSIGMA_SX
	DDFDDS(2)=ALPHAF*FSIGMA_SY
	DDFDDS(3)=ALPHAF*FSIGMA_SZ
      DDFDDS(4)=ALPHAF*TWO*FTAO_SXY
	DDFDDS(5)=ALPHAF*TWO*FTAO_SZX
	DDFDDS(6)=ALPHAF*TWO*FTAO_SYZ
C     
C	FIRST ORDER G-SIGMA
      ALPHAG=THREE/(TWO*GEQSTRESS)
      DDGDDS(1)=ALPHAG*GSIGMA_SX
	DDGDDS(2)=ALPHAG*GSIGMA_SY
	DDGDDS(3)=ALPHAG*GSIGMA_SZ
      DDGDDS(4)=ALPHAG*TWO*GTAO_SXY
	DDGDDS(5)=ALPHAG*TWO*GTAO_SZX
	DDGDDS(6)=ALPHAG*TWO*GTAO_SYZ	  
C**************************************************
c      DO K1=1+NDI,NTENS
c          DDGDDS(K1)=TWO*DDGDDS(K1)
c      ENDDO
C***************************************************  
C     CALCULATE [D][DDGDDS]=DDGDS ON POINT C. INITIALIZE 0
      DO K1=1,NTENS  
	   DDGDS(K1)=ZERO
      ENDDO	
      DO K1=1,NTENS
	   DO K2=1,NTENS
		 DDGDS(K1)=DDGDS(K1)+DDSTIFF(K1,K2)*DDGDDS(K2)
         ENDDO
      ENDDO	 
C******CALCULATE YIELD SURFACE AND PARAMETERS***********************
       B=GF*((GG*DDGDDS(2)-GH*DDGDDS(3))*GAA)**TWO+
     1 GG*((GH*DDGDDS(3)-GF*DDGDDS(1))*GAA)**TWO+
     2 GH*((GF*DDGDDS(1)-GG*DDGDDS(2))*GAA)**TWO
C
       B=B+DDGDDS(4)*DDGDDS(4)*HALF/GN+
     1 DDGDDS(5)*DDGDDS(5)*HALF/GM+
     2 DDGDDS(6)*DDGDDS(6)*HALF/GL
C
       B=DSQRT(TWO*(GF+GG+GH)*B/THREE)
c       WRITE(7,*),'B',B
C       WRITE(7,*),'FB',FB
C       WRITE(7,*),'NBLFM1&2',NBLFM1,NBLFM2
C       WRITE(7,*),'DNBL',DNBL
**************************************   
C************************************
	FC=FEQSTRESS-YIELDD
C      WRITE(7,*),'FEQ-YIELDD',FEQSTRESS,YIELDD
C      WRITE(7,*),'FC',FC
C************************************  
C      
      IF(EQPLAS.EQ.ZERO)THEN
      HARD=EMOD 
      YIELDD=YIELD0
      ELSE 
C      HARD=HN*HK*(EQPLAS)**(HN-1)
      HARD=HB*HC*exp(-HC*EQPLAS)
C      HARD=HN*HK*(EQPLAS+YIELD0/EMOD)**(HN-1)      
      YIELDD=YIELD0+HB*(1-exp(-HC*EQPLAS))
      ENDIF
C     A'
	NBLFM2=HARD*B
C	  
C     FROM HERE CALCULATE Q Q-1 AND OTHER TEMP     
C     SENCOND ORDER G-SIGMA ri
       DDBDDS(1,1)=ONEHALF*((GH+GG)*GSUM/GEQSTRESS-ONEHALF*GSIGMA_SX*
     1 GSIGMA_SX/(GEQSTRESS**3))
       DDBDDS(1,2)=ONEHALF*((-GH)*GSUM/GEQSTRESS-ONEHALF*GSIGMA_SX*
	1 GSIGMA_SY/(GEQSTRESS**3))
	 DDBDDS(1,3)=ONEHALF*((-GG)*GSUM/GEQSTRESS-ONEHALF*GSIGMA_SX*
	1 GSIGMA_SZ/(GEQSTRESS**3))
	 DDBDDS(1,4)=ONEHALF*(-THREE*GSIGMA_SX*GTAO_SXY/(GEQSTRESS**3))
	 DDBDDS(1,5)=ONEHALF*(-THREE*GSIGMA_SX*GTAO_SZX/(GEQSTRESS**3)) 
	 DDBDDS(1,6)=ONEHALF*(-THREE*GSIGMA_SX*GTAO_SYZ/(GEQSTRESS**3)) 
C      
       DDBDDS(2,1)=ONEHALF*((-GH)*GSUM/GEQSTRESS-ONEHALF*GSIGMA_SY*
	1 GSIGMA_SX/(GEQSTRESS**3))
       DDBDDS(2,2)=ONEHALF*((GF+GH)*GSUM/GEQSTRESS-ONEHALF*GSIGMA_SY*
	1 GSIGMA_SY/(GEQSTRESS**3))
	 DDBDDS(2,3)=ONEHALF*((-GF)*GSUM/GEQSTRESS-ONEHALF*GSIGMA_SY*
	1 GSIGMA_SZ/(GEQSTRESS**3))
	 DDBDDS(2,4)=ONEHALF*(-THREE*GSIGMA_SY*GTAO_SXY/(GEQSTRESS**3))
	 DDBDDS(2,5)=ONEHALF*(-THREE*GSIGMA_SY*GTAO_SZX/(GEQSTRESS**3)) 
	 DDBDDS(2,6)=ONEHALF*(-THREE*GSIGMA_SY*GTAO_SYZ/(GEQSTRESS**3)) 
C
       DDBDDS(3,1)=ONEHALF*((-GG)*GSUM/GEQSTRESS-ONEHALF*GSIGMA_SZ*
	1 GSIGMA_SX/(GEQSTRESS**3))
       DDBDDS(3,2)=ONEHALF*((-GF)*GSUM/GEQSTRESS-ONEHALF*GSIGMA_SZ*
     1 GSIGMA_SY/(GEQSTRESS**3))
	 DDBDDS(3,3)=ONEHALF*((GG+GF)*GSUM/GEQSTRESS-ONEHALF*GSIGMA_SZ*
	1 GSIGMA_SZ/(GEQSTRESS**3))
	 DDBDDS(3,4)=ONEHALF*(-THREE*GSIGMA_SZ*GTAO_SXY/(GEQSTRESS**3))
	 DDBDDS(3,5)=ONEHALF*(-THREE*GSIGMA_SZ*GTAO_SZX/(GEQSTRESS**3)) 
	 DDBDDS(3,6)=ONEHALF*(-THREE*GSIGMA_SZ*GTAO_SYZ/(GEQSTRESS**3))
C***
       DDBDDS(4,1)=ONEHALF*(-THREE*GTAO_SXY*GSIGMA_SX/(GEQSTRESS**3))
       DDBDDS(4,2)=ONEHALF*(-THREE*GTAO_SXY*GSIGMA_SY/(GEQSTRESS**3))
	 DDBDDS(4,3)=ONEHALF*(-THREE*GTAO_SXY*GSIGMA_SZ/(GEQSTRESS**3))
	 DDBDDS(4,4)=THREE*(GN*GSUM/GEQSTRESS-
	1 THREE*GTAO_SXY*GTAO_SXY/(GEQSTRESS**3))
	 DDBDDS(4,5)=THREE*(-THREE*GTAO_SXY*GTAO_SZX/(GEQSTRESS**3))
	 DDBDDS(4,6)=THREE*(-THREE*GTAO_SXY*GTAO_SYZ/(GEQSTRESS**3))	   
C***
       DDBDDS(5,1)=ONEHALF*(-THREE*GTAO_SZX*GSIGMA_SX/(GEQSTRESS**3))
       DDBDDS(5,2)=ONEHALF*(-THREE*GTAO_SZX*GSIGMA_SY/(GEQSTRESS**3))
	 DDBDDS(5,3)=ONEHALF*(-THREE*GTAO_SZX*GSIGMA_SZ/(GEQSTRESS**3))
	 DDBDDS(5,4)=THREE*(-THREE*GTAO_SZX*GTAO_SXY/(GEQSTRESS**3))
	 DDBDDS(5,5)=THREE*(GM*GSUM/GEQSTRESS-
	1 THREE*GTAO_SZX*GTAO_SZX/(GEQSTRESS**3))
	 DDBDDS(5,6)=THREE*(-THREE*GTAO_SZX*GTAO_SYZ/(GEQSTRESS**3))
C***
       DDBDDS(6,1)=ONEHALF*(-THREE*GTAO_SYZ*GSIGMA_SX/(GEQSTRESS**3))
       DDBDDS(6,2)=ONEHALF*(-THREE*GTAO_SYZ*GSIGMA_SY/(GEQSTRESS**3))
	 DDBDDS(6,3)=ONEHALF*(-THREE*GTAO_SYZ*GSIGMA_SZ/(GEQSTRESS**3))
	 DDBDDS(6,4)=THREE*(-THREE*GTAO_SYZ*GTAO_SXY/(GEQSTRESS**3))
	 DDBDDS(6,5)=THREE*(-THREE*GTAO_SYZ*GTAO_SZX/(GEQSTRESS**3))
	 DDBDDS(6,6)=THREE*(GL*GSUM/GEQSTRESS-
	1 THREE*GTAO_SYZ*GTAO_SYZ/(GEQSTRESS**3))
C***DDEDDB=DDSTIFF*DDBDDS  ELASTIX MATRIX*2ND MATRIX
C       WRITE(6,*),'DDBDDS',DDBDDS(1,1),DDBDDS(1,2),DDBDDS(1,3)
       DO 700 K1=1,NTENS
       DO 700 K2=1,NTENS
           DDEDDB(K1,K2)=ZERO
	      DO 800 K3=1,NTENS
            DDEDDB(K1,K2)=DDEDDB(K1,K2)+DDSDDE(K1,K3)*DDBDDS(K3,K2)
800            CONTINUE
700    CONTINUE
C*********
       DO K1=1,NTENS
          DO K2=1,NTENS
             Q(K1,K2)=DNBL*DDEDDB(K1,K2)
          ENDDO
       ENDDO 		  
       DO K1=1,NTENS   
          Q(K1,K1)=Q(K1,K1)+ONE
      ENDDO
C    GET Q THEN CALCULATE Q-1      
C  ***************SAFE Q, USE INVQ TO INVERSE
        DO K1=1,NTENS
          DO K2=1,NTENS             
              INVQ(K1,K2)=Q(K1,K2)
          ENDDO
      ENDDO   
C***************      
      CALL BRINV(INVQ,6,L,IS,JS)	   
C
C
C****NBLFMT IS Q-1 De G	
       DO K1=1,NTENS
         NBLFMT(K1)=ZERO
       ENDDO
C   
       DO K1=1,NTENS  
	      DO K2=1,NTENS
            NBLFMT(K1)=NBLFMT(K1)+INVQ(K1,K2)*DDGDS(K2)
            ENDDO
       ENDDO		  
       NBLFM1=ZERO	  
       DO K1=1,NTENS
	    NBLFM1=NBLFM1+NBLFMT(K1)*DDFDDS(K1)
       ENDDO
	    NBLFM=NBLFM1+NBLFM2
C       WRITE(7,*),'NBLFM1',NBLFM1
C       WRITE(7,*),'NBLFM2',NBLFM2   
C       WRITE(7,*),'B---',B,'HARD--',HARD
C       WRITE(7,*),'EQPLAS',EQPLAS
C***   R0 IS THE ERROR BETWEEN THE STRESS 
       DO K1=1,NTENS   
	    R0(K1)=STRESS(K1)-PSTRES(K1)+DNBL*DDGDS(K1)
      ENDDO
C      WRITE(7,*),'R0',R0(1)
C	   
       DO K1=1,NTENS  
	    NBLQR(K1)=ZERO
       ENDDO
       DO K1=1,NTENS
         DO K2=1,NTENS
            NBLQR(K1)=NBLQR(K1)+INVQ(K1,K2)*R0(K2)		 
	   ENDDO
      ENDDO
	    NBLFZ=ZERO
       DO K1=1,NTENS
          NBLFZ=NBLFZ+DDFDDS(K1)*NBLQR(K1)
      ENDDO
C      WRITE(7,*),'NBLFZ11111',NBLFZ
       NBLFZ=FC-NBLFZ	  
C      WRITE(7,*),'NBLFZ2222222',NBLFZ 
C
C      LAMEDA RATE----CNBL 
       CNBL=NBLFZ/NBLFM 
C       WRITE(7,*),'CNBL',CNBL
C      CORRECT THE STRESS AND UPDATE
       DO K1=1,NTENS
          DSTRES(K1)=-NBLQR(K1)-CNBL*NBLFMT(K1)   
       ENDDO
C       WRITE(7,*),'NBLQR(1)NBLFMT(1)',NBLQR(1),NBLFMT(1)
       DO K1=1,NTENS   
          STRESS(K1)=STRESS(K1)+DSTRES(K1)  
       ENDDO
C       WRITE(7,*),'DSTRESS+STRESS',DSTRES(1),STRESS(1)      
C      UPDATE LAMEDA
       DNBL=DNBL+CNBL	
C	 UPDATE THE EQUIVALENT PLASTIC STRAIN
	 EQPLAS=STATEV(13)+CNBL*B    
c       WRITE(7,*),'EQPLAS*********',EQPLAS
C
C******************************************************
C************JUDGEMENT WHETHER IT SATISFIED AND END THE LOOP	   
      IF(FC.LT.TOLER) GOTO 100
C       
C************************************************************       
C     WITH THE DO KNEWTONS    
C       WRITE(7,*),'**********************k',KNEWTON
       ENDDO
C    
C    AFTER NEWTON INTERATION  IF NOT CONVERGE 
       WRITE(7,2)NEWTON,FC 
2     FORMAT(//,'***WARNING-PLASTICITY ALGORITHM DID NOT
     1 CONVERGE AFTER',I3,'ITERRATIONS',2X,'FC EQUALS',E11.4)
C ****
C     OUT THE LOOP
100   CONTINUE
C***
C
C*********UPDATE EELAS,EPLAS
C
      DO 53 K1=1,NTENS
	     EPLAS(K1)=EPLAS(K1)+DNBL*DDGDDS(K1)
		 EELAS(K1)=EELAS(K1)-DNBL*DDGDDS(K1)
53    CONTINUE
C      WRITE(6,*),'EQPLAS',EQPLAS
C       
             
C***
C*********************************************************
C    CALCULATE THE STIFFNESS TANGENT MATRIX       ********
C*********************************************************
C
C  R IS TEMP MATRIX R=Q-1 D
      DO 150 K1=1,NTENS
      DO 150 K2=1,NTENS  
         DO 110 K3=1,NTENS
         R(K1,K2)=R(K1,K2)+INVQ(K1,K3)*DDSDDE(K3,K2)
110      CONTINUE
150   CONTINUE
C*******	 
      DO K1=1,NTENS
	   DO K2=1,NTENS
		 ATRT(K1)=ATRT(K1)+R(K1,K2)*DDFDDS(K2)
		 RB(K1)=RB(K1)+R(K1,K2)*DDGDDS(K2)
         ENDDO
      ENDDO
C
      DO K1=1,NTENS
         DO K2=1,NTENS
         JCOBFZ(K1,K2)=RB(K1)*ATRT(K2)
         ENDDO
      ENDDO
C***
      JCOBFM=NBLFM
C    CALCULATE JACOBIAN MATRIX 
      DO K1=1,NTENS
         DO K2=1,NTENS
         DDSDDE(K1,K2)=R(K1,K2)-JCOBFZ(K1,K2)/JCOBFM
         ENDDO
      ENDDO
C***
C     IF(FB.LT.YIELDD) THEN
C  ***************************************      
      ELSE 
      DO K1=1,NTENS
	     STRESS(K1)=PSTRES(K1)
      ENDDO
C    
      ENDIF
C 
C*********OUTPUT***************************
      DO K1=1,NTENS
      STATEV(K1)=EELAS(K1)
      STATEV(K1+NTENS)=EPLAS(K1)
      ENDDO
      STATEV(13)=EQPLAS
      STATEV(14)=FEQSTRESS
      STATEV(15)=GEQSTRESS
C***
C
C	  
C	 WRITE(7,1001),EELAS(3),STATEV(1+2*NTENS) 
C1001 FORMAT(//'LAST',2E11.4)
C***
C
      RETURN
      END
C
C
C      
C
      SUBROUTINE BRINV(A,N,L,IS,JS)
      DIMENSION A(N,N),IS(N),JS(N)
      DOUBLE PRECISION A,T,D
      L=1
      DO 3100 K=1,N
          D=0.0
          DO 310 I=K,N
          DO 310 J=K,N
           IF(ABS(A(I,J)).GT.D)THEN
               D=ABS(A(I,J))
               IS(K)=I
               JS(K)=J
           ENDIF
310   CONTINUE
      IF((D+1.0).EQ.1.0)THEN
          L=0
          WRITE(*,320)
          RETURN
      ENDIF
320   FORMAT(1X,'ERR**NOT INV')
      DO 330 J=1,N
          T=A(K,J)
          A(K,J)=A(IS(K),J)
          A(IS(K),J)=T
330   CONTINUE
      DO 340 I=1,N
      T=A(I,K)
      A(I,K)=A(I,JS(K))
      A(I,JS(K))=T
340   CONTINUE
      A(K,K)=1/A(K,K)
      DO 350 J=1,N
          IF(J.NE.K)THEN
              A(K,J)=A(K,J)*A(K,K)
          ENDIF
350   CONTINUE
      DO 370 I=1,N
          IF(I.NE.K)THEN
              DO 360 J=1,N
                IF(J.NE.K)THEN
                   A(I,J)=A(I,J)-A(I,K)*A(K,J)
                ENDIF
360   CONTINUE
      ENDIF        
370   CONTINUE
      DO 380 I=1,N
          IF(I.NE.K)THEN
              A(I,K)=-A(I,K)*A(K,K)
          ENDIF
380   CONTINUE
3100  CONTINUE      
      DO 3130 K=N,1,-1
          DO 3110 J=1,N
           T=A(K,J)
           A(K,J)=A(JS(K),J)
           A(JS(K),J)=T
3110      CONTINUE
      DO 3120 I=1,N
          T=A(I,K)
          A(I,K)=A(I,IS(K))
          A(I,IS(K))=T
3120  CONTINUE
3130  CONTINUE
      RETURN
      END SUBROUTINE BRINV
              
 